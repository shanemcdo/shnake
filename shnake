#!/bin/sh

PRG="shnake"
HEAD_COLOR="\033[42m"
BODY_COLOR="\033[102m\033[36m"
FRUIT_COLOR="\033[31m"
RESET_COLOR="\033[0;0m"
HEAD="$HEAD_COLOR  $RESET_COLOR"
BODY="${BODY_COLOR}XX$RESET_COLOR"
FRUIT="${FRUIT_COLOR}▝▘$RESET_COLOR"
CLEAR="  "
OFFSET_X=1
OFFSET_Y=2
SCALE_X=2

reset_term(){
    show_cursor
    stty cooked
    stty echo
}

quit(){
    reset_term
    clear
    printf "$*"
    echo "You got a score of $score"
    exit 0
}

die(){
    reset_term
    printf "$PRG: \033[1;31merror:\033[0m \033[1;37m%s$RESET_COLOR\n" "$*" >&2 # print to stderr
    exit 1
}

move_cursor(){
    if [ "$#" -ne 2 ]; then
        die "Incorrect number of args passed to move_cursor"
    fi
    printf "\033[%d;%dH" "$2" "$1"
}

show_cursor(){
    printf "\033[?25h"
}

hide_cursor(){
    printf "\033[?25l"
}

print_block(){
    if [ "$#" -ne 3 ]; then
        die "Incorrect number of args passed to print_block"
    fi
    move_cursor "$(($1 * SCALE_X + OFFSET_X))" "$(($2 + OFFSET_Y))"
    printf "$3"
}

get_random_fruit(){
    # TODO ensure no overlap better
    # TODO sometimes fruit does not come back ... fix that
    # eval coord="\${$((RANDOM % $# + 1))}"
    # fruit_x="$(echo $coord | cut -d ',' -f 1)"
    # fruit_y="$(echo $coord | cut -d ',' -f 2)"
    fruit_x="$(( RANDOM % width ))"
    fruit_y="$(( RANDOM % height ))"
    if [ "$fruit_x,$fruit_y" = "$head_x,$head_y" ] || collides_with_body "$fruit_x" "$fruit_y"; then
        get_random_fruit
    else
        print_block "$fruit_x" "$fruit_y" "$FRUIT"
    fi
}

eat_fruit(){
    if [ "$new_head_x,$new_head_y" = "$fruit_x,$fruit_y" ]; then
        score="$(( score + 1 ))"
        draw_score
        length_to_add="$(( length_to_add + 2 ))"
        get_random_fruit
    fi
}

get_size(){
    term_width="$(tput cols)"
    term_height="$(tput lines)"
    width="$(( term_width / SCALE_X ))"
    # 1 and not OFFSET_Y because OFFSET_Y accounts for
    # a) the switch from 1-indexing to 0-indexing
    # b) The one line used for score
    # This only needs to account for score
    height="$(( term_height - 1 ))"
}

out_of_bounds(){
    if [ "$#" -ne 2 ]; then
        die "Incorrect number of args passed to out_of_bounds"
    fi
    [ "$1" -lt 0  ] || [ "$1" -ge "$width"  ] || [ "$2" -lt 0  ] || [ "$2" -ge "$height" ]
}

collides_with_body(){
    if [ "$#" -ne 2 ]; then
        die "Incorrect number of args passed to collides_with_body"
    fi
    echo "$body" | grep -qE "\b$1,$2\b"
}

collides(){
    if [ "$#" -ne 2 ]; then
        die "Incorrect number of args passed to collides"
    fi
    out_of_bounds "$1" "$2" || collides_with_body "$1" "$2"
}

move_head(){
    new_head_x="$head_x"
    new_head_y="$head_y"
    case "$direction" in
        "up") new_head_y="$(( head_y - 1 ))";;
        "down") new_head_y="$(( head_y + 1 ))";;
        "left") new_head_x="$(( head_x - 1 ))";;
        "right") new_head_x="$(( head_x + 1 ))";;
    esac
    if collides "$new_head_x" "$new_head_y"; then
        game_over
    fi
    set -- $body "$head_x,$head_y"
    draw_body
    head_x="$new_head_x"
    head_y="$new_head_y"
    draw_head
    if [ "$length_to_add" -gt 0 ]; then
        length_to_add="$(( length_to_add - 1 ))"
    else
        x="$(echo "$1" | cut -d ',' -f 1)"
        y="$(echo "$1" | cut -d ',' -f 2)"
        print_block "$x" "$y" "$CLEAR"
        shift
    fi
    body="$*"
    eat_fruit
}

game_over(){
    quit "You died!\n"
}

getch(){
    old_tty_settings=$(stty -g)   # Save old settings.
    stty -icanon time 0 min 0
    head -c1
    stty "$old_tty_settings"      # Restore old settings.
}

draw_head(){
    print_block "$head_x" "$head_y" "$HEAD"
}

# must be called after a new head has been made but before
draw_body(){
    print_block "$head_x" "$head_y" "$BODY"
}

draw_score(){
    move_cursor 0 0
    echo "Score: $score"
}

kbin(){
    ch="$(getch)"
    case "$ch" in
        w) [ "$direction" != "down" ] && direction="up";;
        a) [ "$direction" != "right" ] && direction="left";;
        s) [ "$direction" != "up" ] && direction="down";;
        d) [ "$direction" != "left" ] && direction="right";;
        q) quit;;
    esac
}

print_instructions(){
    while IFS= read -r line; do
        echo "$line"
    done << EOF
Welcome to $PRG.
use the wasd keys to control the snake or hit q to quit.
Press enter to continue.
EOF
    read -r _
}

main(){
    score=0
    length_to_add=2
    direction="up"
    get_size
    head_x="$((width / 2))"
    head_y="$((height / 2))"
    body=""
    print_instructions
    stty raw -echo
    hide_cursor
    clear
    get_random_fruit
    draw_score
    while true; do
        move_head
        kbin
        sleep 0.07
    done
    show_cursor
}

main
